<?php

/**
 * @file
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_block_view_alter().
 */
function hycm_blocks_block_view_alter(array &$build, BlockPluginInterface $block) {
  if(\Drupal::service('theme.manager')->getActiveTheme()->getName() === 'hycm') {
    $build['#pre_render'][] = '_hycm_block_pre_render';
    $build['#cache']['max-age'] = 0;
  }

}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function hycm_blocks_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  if ($entity->bundle() == 'different_by_domain') {
    /** @var \Drupal\hycm_services\HycmServicesDomain $hycmDomain */
    $hycmDomain = \Drupal::service('hycm_services.domain');
    $domain = $hycmDomain->getDomain();
    $build['#cache']['contexts'][] = 'hycm_domain';
    switch ($domain) {
      case 'com' :
        unset($build['field_body_eu']);
        unset($build['field_body_uk']);
        break;
      case 'uk':
        unset($build['field_body_eu']);
        unset($build['field_body_com']);
        break;
      case 'eu':
        unset($build['field_body_uk']);
        unset($build['field_body_com']);
        break;
      default:
        unset($build['field_body_eu']);
        unset($build['field_body_uk']);

    }

  }
}



/**
 * Implements hook_theme().
 */
function hycm_blocks_theme($existing, $type, $theme, $path) {
  $themes = [];
  $themes['black_switch'] = [
    'variables' => [
      'login' => NULL,
      'livechat' => NULL,
      'switch' => NULL,
    ],
  ];

  $themes['hycm_main_menu'] = [
    'variables' => [
      'items' => NULL,
      'brand' => NULL,
      'register' => NULL,
      'deposit' => NULL,
    ],
    'template' => 'hycm-main-menu',
  ];

  $themes['open_an_account'] = [
    'variables' => [
      'button' => NULL,
      'attributes' => NULL,
      'is_warning' => TRUE,
    ],
    'template' => 'open-an-account',
  ];

  $themes['open_an_account_big'] = [
    'variables' => [
      'button' => NULL,
      'warning' => NULL,
      'is_warning' => TRUE,
    ],
    'template' => 'open-an-account-big',
  ];

  $themes['news_list'] =  [
    'variables' => [
      'news'  =>  NULL
    ],
    'template'  => 'news-list'
  ];

  $themes['awards_list'] =  [
    'variables' => [
      'awards'  =>  NULL
    ],
    'template'  => 'awards-list'
  ];

  $themes['awards'] =  [
    'variables' => [
      'items'  =>  NULL,
      'title' => NULL,
      'attributes'  =>  NULL
    ],
    'template'  => 'awards'
  ];

  $themes['markets_home'] =  [
    'variables' => [
      'items'  =>  NULL,
      'link' => NULL,
      'attributes' => NULL,
    ],
    'template'  => 'markets-home',
  ];

  $themes['workshop_faq'] =  [
    'variables' => [
      'items'  =>  NULL,
      'show_items' => NULL,
      'attributes' => NULL,
    ],
    'template'  => 'workshop-faq',
  ];

  $themes['landing_header'] =  [
    'variables' => [
      'header'  =>  NULL,
    ],
    'template'  => 'landing-header',
  ];

  $themes['client_portal_language'] =  [
    'variables' => [
      'items'  =>  NULL,
      'attributes' => NULL,
    ],
    'template'  => 'client-portal-language',
  ];

  $themes['client_portal_profile_menu'] =  [
    'variables' => [
      'items'  =>  NULL,
      'attributes' => NULL,
    ],
    'template'  => 'client-portal-profile-menu',
  ];

  $themes['form_join_webinar'] =  [
    'variables' => [
      'webinarid' =>  NULL,
      'attributes' => NULL,
    ],
    'template'  => 'form-join-webinar',
  ];

  return $themes;
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_awards(&$variables) {
  $variables['#attached']['library'][] = 'hycm_blocks/awards';
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_markets_home(&$variables) {

}
/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_workshop_faq(&$variables) {

  $toShow = $variables['show_items'];
  if ($toShow == 0) {
    $toShow = count($variables['items']);
  }
  $variables['has_more'] = count($variables['items']) > $toShow;

  foreach ($variables['items'] as $key => $item) {

    $isShow = $key + 1 > $toShow;
    $itemAttributes = [
      'class' => [
        'accordion-item',
        $isShow ? 'item-hidden' : 'item-view',
      ],
    ];

    $variables['items'][$key]['question'] = new FormattableMarkup($variables['items'][$key]['question'], []);
    $variables['items'][$key]['answer'] = new FormattableMarkup($variables['items'][$key]['answer'], []);
    $variables['items'][$key]['attributes'] = new Attribute($itemAttributes);

  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function hycm_blocks_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  // remove from home page
  if ($entity->id() == 2) {
    $unset_html_head_link = [
      'delete-form',
      'edit-form',
      'version-history',
      'revision',
      'display',
      'drupal:content-translation-overview',
      'drupal:content-translation-add',
      'drupal:content-translation-edit',
      'drupal:content-translation-delete',
    ];
    foreach ($build['#attached']['html_head_link'] as $key => $value) {
      if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
        unset($build['#attached']['html_head_link'][$key]);
      }
    }
  }

}
/**
 * Implements hook_page_attachments_alter().
 */
function hycm_blocks_page_attachments_alter(array &$attachments) {

 // dpm($attachments, 'hycm block');
}

/**
 * Implements hook_module_implements_alter().
 */
function hycm_blocks_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'page_attachments_alter') {
    $group = $implementations['hycm_blocks'];
    unset($implementations['hycm_blocks']);
    $implementations['hycm_blocks'] = $group;
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_hycm_main_menu(&$variables) {

  foreach ($variables['items'] as $key => $item) {
    $id = explode('.' , $key)[1];
    $variables['items'][$key]['hycm_nav_id'] = $id;
  }

 // dpm($variables, 'template_preprocess_hycm_main_menu');

}

/**
 * Implements hook_language_switch_links_alter().
 */
function hycm_blocks_language_switch_links_alter(array &$links, $type, Url $url) {

//  dpm($links, 'alter');
}


/**
 * @deprecated 8.5.0
 */
function get_current_node_type() {
  $current_page_type = null;
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $current_page_type = $node->getType();
  }

  return $current_page_type;
}

/**
 * @deprecated 8.5.0
 */
function check_new_node() {
  $newNode = null;
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    if($node->getCreatedTime() > 1516667224)  {
      $newNode = true;
    }
  }

  return $newNode;
}

/**
 * @deprecated 8.5.0
 *
 * @return array
 */
function get_lang() {
  $lang = &drupal_static(__FUNCTION__);
  if (!isset($lang)) {
    //\Drupal::logger('bad code')->debug('get_lang');
    /** @var \Drupal\Core\Language\LanguageInterface $currentLanguage */
    $currentLanguage = \Drupal::languageManager()->getCurrentLanguage();
    $lang = [
      'id' => $currentLanguage->getId(),
      'name' => $currentLanguage->getName(),
    ];
  }
  return $lang;
}

/**
 * @deprecated 8.5.0
 */
function get_alias() {
  $alias = null;

  $current_path = \Drupal::service('path.current')->getPath();
  $alias = substr(\Drupal::service('path.alias_manager')->getAliasByPath($current_path),1);

  return $alias;
}
/*
 *
 */
function hycm_blocks_lenght_after_dot($value) {
  $lenght_after_dot = 0;

  if (is_float($value)) {
    $parts_of_digit = explode('.', $value);
    $lenght_after_dot = strlen($parts_of_digit[1]);
  }

  return $lenght_after_dot;
}

/*
 *
 */
function hycm_blocks_compare_digits($value1, $value2) {
  $first_lenght = hycm_blocks_lenght_after_dot($value1);
  $second_lenght = hycm_blocks_lenght_after_dot($value2);


  return max($first_lenght, $second_lenght);
}

/**
 * Pre-render callback for blocks.
 *
 * Adds a related values to the blocks.
 */
function _hycm_block_pre_render(array $build) {

  try {

      $current_page_type = get_current_node_type();
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node instanceof \Drupal\node\NodeInterface && $current_page_type == 'page' || $current_page_type == 'registration' || $current_page_type == 'landing'  || $current_page_type == 'landing_new') {
          $meta = $node->getFields();
          $variables['meta']['title'] = $variables['meta']['description'] = null;
          if($meta){
              if(!empty($meta['field_page_title']->getValue())){
                  $variables['meta']['title'] = $meta['field_page_title']->getValue()[0]['value'];
              }
              if(!empty($meta['field_meta_description']->getValue())){
                  $variables['meta']['description'] = $meta['field_meta_description']->getValue()[0]['value'];
              }
          }
      }


    if (isset($build['content'])) {
      $alias = get_alias();
      $lang = get_lang();

      $current_page_type = get_current_node_type();
      $domain = hycm_services_get_domain();

      $vals= array();
      $start_time = microtime(true);
      // foreach just fields in main block
      foreach ($build['content'] as $glob_key => $variable) {
        if($variable && is_array($variable) && isset($variable['#theme']) && $variable['#theme'] !== "menu_local_action" && strpos($glob_key, 'field_') === 0){
          $temp = get_vals($variable);
          $vals[$variable['#field_name']] = $temp;
        }
      }

      $time = microtime(true) - $start_time;
      $script_time = number_format($time,10,'.','');
      $vals['alias'] = $alias;
      $vals['lang'] = $lang;
      $vals['current_page_type'] = $current_page_type;

//Notice: Undefined index: #id in _hycm_block_pre_render() (line 271 of modules/custom/hycm_blocks/hycm_blocks.module). @todo :fix error
      if($build["#id"] === 'header' || $build["#id"] === 'header_client_portal' || $build["#id"] === 'header_registration'){
        //        $enabled_langs = array_fill_keys($enabled_langs, '');
        //        $available_langs = \Drupal::languageManager()->getLanguages();
        //        $vals['all_langs'] = array_intersect_key($available_langs,$enabled_langs);
        $all_langs = \Drupal::languageManager()->getLanguages();

        unset($all_langs['zh-hans']);

        foreach ($all_langs as $key => $lang1) {
          $new_lang['name'] = $lang1->getName();
          $new_lang['id'] = $lang1->getId();
          switch ($new_lang['id']){
            case 'fa': $new_lang['native'] = 'فارسی'; break;
            case 'sv': $new_lang['native'] = 'Swedish'; break;
            case 'en': $new_lang['native'] = 'English'; break;
            case 'pl': $new_lang['native'] = 'Polski'; break;
            case 'de': $new_lang['native'] = 'Deutsch'; break;
            case 'cs': $new_lang['native'] = 'Čeština'; break;
            case 'fr': $new_lang['native'] = 'Français'; break;
            case 'ar': $new_lang['native'] = 'عربى'; break;
            case 'it': $new_lang['native'] = 'Italiano'; break;
            case 'es': $new_lang['native'] = 'Español'; break;
            case 'ru': $new_lang['native'] = 'Русский'; break;
            case 'zh-hans':
              $new_lang['native'] = '繁體中文';
              $new_lang['id'] = 'zh';
              break;
            default: break;
          }
          $vals['all_langs'][$key] = $new_lang;
        }

      }elseif($build["#id"] === 'home_page') {

        try {
          $prices = file_get_contents('http://prices.hycm.com/graphs/prices');
          $prices_vals = json_decode($prices,true);
        }
        catch (\Exception $e) {
          \Drupal::logger('hycm blocks')->error('Error in _hycm_block_pre_render function');
        }
        if(!empty($prices_vals)) {
          foreach ($prices_vals as $name_of_market => $pair) {
            foreach ($pair as $pair_name=>$info) {
              $lenght = hycm_blocks_compare_digits($info["details"]["bid"], $info["details"]["ask"]);
              $prices_vals[$name_of_market][$pair_name]["details"]["bid"] = number_format($info["details"]["bid"], $lenght);
              $prices_vals[$name_of_market][$pair_name]["details"]["ask"] = number_format($info["details"]["ask"], $lenght);
            }
          }
        }
        $vals['prices'] = $prices_vals;
      }else if($build["#id"] === 'outlook_page'){


        $api_key = 'AIzaSyBWTvQXDBA3TBFYsacx7vDG9MSuHh4lYo8';
        $playlist_id = 'PLnJ3ZJ7UKzLQW45ZcSaDPb-vevPmb5FMH';

        $markOutlook = json_decode(file_get_contents('http://prices.hycm.com/marketOutlook'), true);
        $vals['tech_snapshot']['url'] = 'https://newsletters.tradingcentral.com/henyep/index_en.html';

        switch ($lang['id']){
          case 'ru':
            $playlist_id = 'PLnJ3ZJ7UKzLSlLiJ7-SnnUknEPcPYcbM2';
            $markOutlook = json_decode(file_get_contents('http://prices.hycm.com/marketOutlook/ru'), true);
            $vals['tech_snapshot']['url'] = 'https://newsletters.tradingcentral.com/henyep/index_ru.html';
            break;
          //            case 'zh-hans':
          //                $playlist_id = 'PLnJ3ZJ7UKzLQtXUCT0WwkXR7oyKN6lwjR';
          //                break;
          case 'ar':
            $playlist_id = 'PLnJ3ZJ7UKzLTFRGBrp96BKnHFxtvpwheN';
            $markOutlook = json_decode(file_get_contents('http://prices.hycm.com/marketOutlook/ar'), true);
            $vals['tech_snapshot']['url'] = 'https://newsletters.tradingcentral.com/henyep/index_ar.html';
            break;
        }

        $vals['tech_snapshot']['date'] = $markOutlook['technicalSnap']['date'];
        $vals['tech_snapshot']['table'] = $markOutlook['technicalSnap']['value'];

        $vals['top_movers'] = $markOutlook['top_movers'];

        $api_url = 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&maxResults=1&playlistId='. $playlist_id . '&key=' . $api_key;

        $video_obj = json_decode(file_get_contents($api_url));

        $re = '/[^0-9-.]/u';
        $snip_title = $video_obj->items[0]->snippet->title;
        preg_match_all($re, $snip_title, $matches, PREG_SET_ORDER, 0);
        $title = trim(str_replace('HYCM','',implode(array_reduce($matches, 'array_merge', array()))));

        $vals['youtube_video']['id'] = $video_obj->items[0]->contentDetails->videoId;
        $vals['youtube_video']['date'] = date('d.m.Y',strtotime($video_obj->items[0]->contentDetails->videoPublishedAt));
        $vals['youtube_video']['title'] = $title;
        $vals['youtube_video']['description'] = $video_obj->items[0]->snippet->description;

// Notice: Undefined index: #id in _hycm_block_pre_render() (line 351 of modules/custom/hycm_blocks/hycm_blocks.module).
      } else if($build["#id"] === 'platforms_page' || $alias == 'trading-platform/mt5') {
        $top_movers = file_get_contents('http://prices.hycm.com/widget');
        $vals['widget'] = json_decode($top_movers,true);
        if($domain == 'eu'){
          unset($vals['widget']['crypto']);
        }
      } else if($build["#id"] === 'markets_page') {
        // for swap calc!
        //       json with swap/lot sizes for swap calculator
        //        $markets = array();
        //        $i = 0;
        //        require_once('simple_html_dom.php');
        //        foreach ($vals['field_markets_page_tables']['markets_tables_157']['field_markets_tables'] as $table) {
        //
        //            $table_html = new simple_html_dom();
        //            $table_html->load($table['value']);
        //            if($i%2 && $table_html){
        //                switch ($i){
        //                    case (1):
        //                        $market = 'forex';
        //                        break;
        //                    case (3):
        //                        $market = 'stocks';
        //                        break;
        //                    case (5):
        //                        $market = 'indices';
        //                        break;
        //                    case (7):
        //                        $market = 'cryptocurrencies';
        //                        break;
        //                    case (9):
        //                        $market = 'commodities';
        //                        break;
        //                    default:
        //                        $market = $i;
        //
        //                }
        //                foreach ($table_html->find('tr') as $row) {
        //                    $j = 0;
        //                    $instr = '';
        //                    foreach ($row->find('td') as $cell) {
        //                        switch ($j){
        //                            case 0:
        //                                $instr = $cell->innertext;
        //                                $markets[$market][$instr] = array();
        //                                break;
        //                            case 4:
        //                                $markets[$market][$instr]['swap-short'] = substr($cell->innertext, 0, strpos($cell->innertext,' '));
        //                                break;
        //                            case 5:
        //                                $markets[$market][$instr]['swap-long'] = substr($cell->innertext, 0, strpos($cell->innertext,' '));
        //                                break;
        //                            case 6:
        //                                $markets[$market][$instr]['lot-size'] = substr($cell->innertext, 0, strpos($cell->innertext,' '));
        //                                break;
        //                        }
        //                        $j++;
        //                    }
        //                }
        //            }
        //            $i++;
        //        }
        //        $file = 'themes/custom/hycm/markets.json';
        //        file_put_contents($file, json_encode($markets));
      }

      $build['content']['vals'] = $vals;
      if(isset($_GET['vals'])){
        dump($vals);
      }
    }

  }catch (\Exception $e) {
    \Drupal::logger('hycm blocks')->error('Error in _hycm_block_pre_render function');
  }


  return $build;
}


/**
 * @deprecated 8.5.0
 * @see \Drupal\hycm_services\HycmServicesDomain
 *
 */
function get_domain() {
  return hycm_services_get_domain();
}

function referenced_fields_new($referencedEntity, &$vals){
  $lang = get_lang();

  if(in_array($lang['id'],array_keys($referencedEntity->getTranslationLanguages()))){
    $referencedEntityFields = $referencedEntity->getTranslation($lang['id'])->getFields();
  }else{
    $referencedEntityFields = $referencedEntity->getFields();
  }
  foreach ($referencedEntityFields as $key => $field) {
    $inner_field_name = $field->getName();
    $inner_field_id = $field->getEntity()->id();
    if ($inner_field_name && strpos($inner_field_name, 'field_') === 0 || strpos($inner_field_name, 'title') === 0 || strpos($inner_field_name, 'created') === 0 ) {
      $bundle_name = $referencedEntity->bundle();
      $bundle_id = $referencedEntity->id();
      if (get_class($field) !== 'Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList') {
        if(!$field->isEmpty()){
          $entity_type = $field->getParent()->getValue()->getEntityType()->id();
          if($entity_type === 'paragraph' || $entity_type === 'node') {
            // this is paragraph child
            $parent_name = $field->getParent()->toArray()['parent_field_name'][0]['value'];
            $parent_id = $field->getParent()->toArray()['parent_id'][0]['value'];
            $vals[$bundle_name.'_'.$bundle_id][$inner_field_name] = format_val($field->getValue());
          }else{
            // this is block child
            $vals[$inner_field_name] = format_val($field->getValue());
          };
        }
      } else {
        $referencedEntities_inner = $field->referencedEntities();
        foreach ($referencedEntities_inner as $key_inner => $referencedEntity_inner) {
          if(is_a($referencedEntity_inner,'Drupal\block_content\Entity\BlockContent')){
            // this is reference of block
            referenced_fields_new($referencedEntity_inner, $vals[$inner_field_name]);
          }else{
            // this is reference of paragraph
            referenced_fields_new($referencedEntity_inner, $vals[$bundle_name.'_'.$inner_field_id][$inner_field_name]);
          }
        }
        unset($referencedEntity_inner,$referencedEntities_inner);
      }
    }
  }
}

function referenced_fields($referencedEntity, &$vals, $deep = false){
  $lang = get_lang();

  if ($deep!=false){
    $deep++;
    //        dump('deep - '.$deep);
  }
  if(in_array($lang['id'],array_keys($referencedEntity->getTranslationLanguages()))){
    $referencedEntityFields = $referencedEntity->getTranslation($lang['id'])->getFields();
  }else{
    $referencedEntityFields = $referencedEntity->getFields();
  }
  foreach ($referencedEntityFields as $key => $field) {
    $inner_field_name = $field->getName();
    if ($inner_field_name && strpos($inner_field_name, 'field_') === 0 || $inner_field_name === 'title' || $inner_field_name === 'created' || $inner_field_name === 'nid' ) {
      $inner_field_id = $field->getEntity()->id();
      $inner_field_bundle = $field->getEntity()->bundle();

      if (get_class($field) !== 'Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList') {

        if(!$field->isEmpty()){
          if($inner_field_name === 'nid'){
            $vals[$inner_field_bundle.'_'.$inner_field_id]['alias'] = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$field->getValue()[0]['value']);
          }else{
            $parent_root = $field->getParent()->toArray();
            //                    kint($field->getParent()->toArray()['type'][0]['target_id']);
            //                    die();
            $vals[$inner_field_bundle.'_'.$inner_field_id][$inner_field_name] = format_val($field->getValue());
          }

        }
      } else {
        $referencedEntities_inner = $field->referencedEntities();
        foreach ($referencedEntities_inner as $referencedEntity_inner) {
          //$id = $referencedEntity_inner->id();
          if(method_exists($referencedEntity_inner,'getParentEntity')){
            $parent_id = $referencedEntity_inner->getParentEntity()->id();
            $parent_bundle = $referencedEntity_inner->getParentEntity()->bundle();
            //                    kint($referencedEntity_inner->getEntityType());
            //                    kint($referencedEntity_inner->());
            //                    die();
            $bundle_name = $referencedEntity_inner->bundle();
            //
            if(!$deep){
              $deep = 1;
            }
            referenced_fields($referencedEntity_inner, $vals[$parent_bundle.'_'.$parent_id][$bundle_name], $deep);
          }

        }
        unset($referencedEntity_inner,$referencedEntities_inner);
      }
    }
  }
}

/**
 * @param $variable
 *
 * @return array
 *
 * @deprecated 8.5.0
 */
function get_vals($variable){
  $field_name = $variable['#field_name'];
  $field_type = $variable['#field_type'];
  $field_object = $variable['#object']->$field_name;
  $vals = array();


  if($field_type !== 'entity_reference_revisions'){
    $vals = format_val($field_object->getValue());
  }else{
    $referencedEntities = $field_object->referencedEntities();
    foreach ($referencedEntities as $referencedEntity) {
      $types_old_function = ['page'];
      $newNode = check_new_node();
      $current_page_type = get_current_node_type();

      if($newNode && !in_array($current_page_type,$types_old_function)){
        referenced_fields_new($referencedEntity, $vals);
      }else{
        referenced_fields($referencedEntity, $vals, false);
      }
    }
  }
  return $vals;

}

/**
 * @param $fid
 *
 * @return bool|string
 *
 * @deprecated
 */
function get_url_from_fid($fid){
  $file = \Drupal\file\Entity\File::load($fid);
  if(!is_null($file)){
    $uri = $file->getFileUri();
    return file_create_url($uri);
  }else{
    return false;
  }
}

function format_val($values){
  $value = array();
  foreach ($values as $val) {
    if($val && is_array($val)){
      if(isset($val['value'])){
        if(substr($val['value'], 0, 3) === '<p>' && substr($val['value'], -6, 4) === '</p>'){
          $val['value'] = substr($val['value'], 3, -6);
        }
      }elseif(isset($val['target_id']) && isset($val['alt'])){
        $val['value'] = get_url_from_fid($val['target_id']);
      }elseif (isset($val['uri'])){
        if(strpos($val['uri'], 'external')){
          $val['uri'] = str_replace('external:', '', $val['uri']);
        }else{
          $val['uri'] = \Drupal\Core\Url::fromUri($val['uri'],array('absolute' => TRUE))->toString();
        }
      }
      $value[] = $val;
    }
  }
  return $value;
}
