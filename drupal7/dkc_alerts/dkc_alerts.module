<?php
/**
 * @file
 * Contains hook definitions and helper functions.
 */

/**
 * Implements hook_menu().
 */
function dkc_alerts_menu() {
  $items = array();

  $items['admin/config/dkc/alerts'] = array(
    'title' => 'DKC alerts settings',
    'description' => 'Represents configuration form for DKC alerts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkc_alerts_settings_form'),
    'access arguments' => array('administer dkc alerts'),
    'file' => 'dkc_alerts.admin.inc',
  );

  $items['admin/structure/dkc-alerts'] = array(
    'title' => 'DKC Alerts',
    'description' => 'DKC Alerts list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkc_alerts_list_page'),
    'tab_parent' => 'admin/structure',
    'tab_root' => 'admin/structure',
    'access arguments' => array('administer dkc alerts'),
    'file' => 'dkc_alerts.forms.inc',
  );

  $items['admin/structure/dkc-alerts/create'] = array(
    'title' => 'Creating DKC Alert',
    'description' => 'DKC alert creating form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkc_alert_form'),
    'access arguments' => array('administer dkc alerts'),
    'file' => 'dkc_alerts.forms.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/dkc-alerts/%/edit'] = array(
    'title' => 'Editing DKC Alert',
    'description' => 'DKC alert editing form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkc_alert_form', 3),
    'access arguments' => array('administer dkc alerts'),
    'file' => 'dkc_alerts.forms.inc',
  );

  $items['ajax/dkc-alerts/%/alert'] = array(
    'page callback' => 'dkc_alerts_get_alert',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dkc_alerts_permission() {
  return array(
    'administer dkc alerts' => array(
      'title' => t('Administer DKC alerts'),
      'description' => t('Perform administration tasks for DKC alerts module.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dkc_alerts_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'dkc_alerts');
  return array(
    'dkc_alert_config_table' => array(
      'render element' => 'form',
    ),
    'dkc_alerts_wrapper' => array(
      'variables' => array('alerts' => NULL, 'path' => NULL),
      'path' => $path . '/templates',
      'template' => 'dkc_alerts_wrapper',
    ),
    'dkc_alert' => array(
      'variables' => array('alert' => NULL),
      'path' => $path . '/templates',
      'template' => 'dkc_alert',
    ),
  );
}

/**
 * Helper function for saving dkc alert.
 *
 * @param object $alert
 *   Object with alert data.
 *
 * @return mixed
 *   Saved alert object or NULL.
 */
function dkc_alert_save($alert) {
  $alerts = dkc_alerts_save(array($alert));
  return reset($alerts);
}

/**
 * Helper function for saving alerts.
 *
 * @param array $alerts
 *   Array of alert objects for saving.
 *
 * @return array
 *   Array of saved object.
 */
function dkc_alerts_save(array $alerts = array()) {
  try {
    foreach ($alerts as $alert) {
      $config = array();
      if (!empty($alert->config)) {
        $config = $alert->config;
        unset($alert->config);
      }
      if (!empty($alert->aid)) {
        $alert->changed = time();
        db_update('dkc_alerts')
          ->fields((array) $alert)
          ->condition('aid', $alert->aid)
          ->execute();
      }
      else {
        $alert->created = $alert->changed = time();

        $alert->aid = db_insert('dkc_alerts')
          ->fields((array) $alert)
          ->execute();
      }

      try {
        db_delete('dkc_alert_config')
          ->condition('aid', $alert->aid)
          ->execute();
      }
      catch (Exception $ex) {
        watchdog_exception('dkc_alerts', $ex);
        return NULL;
      }

      foreach ($config as $data) {
        $data = (object) $data;
        $data->aid = $alert->aid;
        $data->cid = db_insert('dkc_alert_config')
          ->fields((array) $data)
          ->execute();
        $alerts->config[$data->cid] = $data;
      }
    }

    return $alerts;
  }
  catch (Exception $ex) {
    watchdog_exception('dkc_alerts', $ex);
    return NULL;
  }
}

/**
 * Helper function for loading dkc alert.
 *
 * @param string $aid
 *   ID of dkc alert.
 *
 * @return mixed object
 *   All data about dkc alert or FALSE.
 */
function dkc_alert_load($aid) {
  $alerts = dkc_alerts_load(array($aid));
  return reset($alerts);
}

/**
 * Helper function for loading dkc alerts.
 *
 * @param array $aids
 *   Array ids of alerts or NULL.
 *
 * @return mixed $aids
 *   Array of alerts or FALSE.
 */
function dkc_alerts_load(array $aids = array()) {
  try {
    $alerts = array();

    $query = db_select('dkc_alerts', 'a')
      ->fields('a');
    if (!empty($aids)) {
      $query->condition('a.aid', $aids, 'IN');
    }

    foreach ($query->execute() as $alert) {
      $alerts[$alert->aid] = $alert;
      $query = db_select('dkc_alert_config', 'c')
        ->fields('c')
        ->condition('c.aid', $alert->aid);

      foreach ($query->execute() as $config) {
        $alerts[$alert->aid]->config[$config->cid] = $config;
      }

    }
    return $alerts;
  }
  catch (Exception $ex) {
    watchdog_exception('dkc_alerts', $ex);
    return FALSE;
  }
}

/**
 * Helper function for deleting alert.
 *
 * @param string $aid
 *   Id of alert object.
 *
 * @return bool
 *   Indicates status of operation.
 */
function dkc_alert_delete($aid) {
  return dkc_alerts_delete(array($aid));
}

/**
 * Helper function for deleting alerts.
 *
 * @param array $aids
 *   Array of aids which should be deleted.
 *
 * @return bool
 *   Indicates status of operation.
 */
function dkc_alerts_delete(array $aids = array()) {
  try {
    if (!empty($aids)) {
      db_query('delete a, c from dkc_alerts a join dkc_alert_config c where a.aid in (:aids)', array(':aids' => $aids));
    }

    return TRUE;
  }
  catch (Exception $ex) {
    watchdog_exception('dkc_alerts', $ex);
    return FALSE;
  }
}

/**
 * Helper function for disabling alert.
 *
 * @param string $aid
 *   Id of alert.
 *
 * @return bool
 *   Indicates status of operation.
 */
function dkc_alert_disable($aid) {
  return dkc_alerts_disable_all(array($aid));
}

/**
 * Helper function for disabling alerts.
 *
 * @param array $aids
 *   Ids of alerts.
 *
 * @return bool
 *   Indicates status of operation.
 */
function dkc_alerts_disable_all(array $aids) {
  try {
    db_update('dkc_alerts')
      ->fields(array(
        'status' => 0,
      ))
      ->condition('aid', $aids, 'IN')
      ->execute();

    return TRUE;
  }
  catch (Exception $ex) {
    watchdog_exception('dkc_alerts', $ex);
    return FALSE;
  }
}

/**
 * Helper function for loading alerts by path.
 *
 * @param string $path
 *   String which describes path.
 *
 * @return array
 *   Array which contains all founded alerts.
 */
function dkc_alerts_load_by_path($path) {
  $alerts = array();
  if (empty($path)) {
    return $alerts;
  }
  $alias = drupal_get_path_alias($path);

  $datetime = new DateTime();
//  $datetime->setTime(0, 0);

  $db_or = db_or()
    ->condition('c.path', $path)
    ->condition('c.path', $alias);
  $query = db_select('dkc_alert_config', 'c');
  $query->join('dkc_alerts', 'a', 'a.aid=c.aid');
  $query->distinct()
    ->fields('a')
    ->fields('c')
    ->condition('a.start', $datetime->getTimestamp(), '<')
    ->condition('a.end', $datetime->getTimestamp(), '>')
    ->condition('a.status', '1')
    ->condition('c.regexpression', '0')
    ->condition($db_or);
  foreach ($query->execute() as $item) {
    $alerts[$item->region][$item->aid] = $item;
  }

  $query = db_select('dkc_alerts', 'a');
  $query->join('dkc_alert_config', 'c', 'a.aid=c.aid');
  $query->fields('a')
    ->fields('c')
    ->condition('a.start', $datetime->getTimestamp(), '<')
    ->condition('a.end', $datetime->getTimestamp(), '>')
    ->condition('a.status', '1')
    ->condition('c.regexpression', '1');

  foreach ($query->execute() as $item) {
    if (preg_match("/{$item->path}/", $path) || preg_match("/{$item->path}/", $alias)) {
      $alerts[$item->region][$item->aid] = $item;
    }
  }

  return $alerts;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dkc_alerts_preprocess_dkc_alerts_wrapper(&$variables) {
  $alerts = &$variables['alerts'];
  foreach ($alerts as &$alert) {
    $alert = theme('dkc_alert', array('alert' => $alert));
  }
}

/**
 * Implements hook_page_build().
 */
function dkc_alerts_page_build(&$page) {
  $current_path = current_path();
  $alerts = dkc_alerts_load_by_path($current_path);
  if ($alerts) {
    $mpath = drupal_get_path('module', 'dkc_alerts');
    foreach ($alerts as $region => $alert) {
      $page[$region]['dkc_alerts'] = array(
        '#weight' => -1000,
        '#markup' => theme('dkc_alerts_wrapper', array(
          'alerts' => $alert,
          'path' => $current_path,
        )),
        '#attached' => array(
          'css' => array(
            $mpath . '/css/dkc_alerts.css',
          ),
          'js' => array(
            $mpath . '/js/dkc_alerts.js',
            array(
              'data' => array('dkcAlerts' => array('timeout' => variable_get('dkc_alerts_timeout', 3))),
              'type' => 'setting',
            ),
          ),
        ),
      );
    }
  }
}

/**
 * Custom theme function for table of lists.
 */
function theme_dkc_alert_config_table($variables) {
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form['configs']) as $id) {
    $rows[$id] = array(
      drupal_render($form['configs'][$id]['path']),
      drupal_render($form['configs'][$id]['regexpression']),
      drupal_render($form['configs'][$id]['delete']),
    );
  }
  $output = theme('table', array(
    'header' => $form['#header'],
    'rows' => $rows,
    'empty' => $form['#empty'],
    'attributes' => array('id' => 'dkc-alert-config-table'),
  ));

  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Ajax handler for refreshing alerts.
 *
 * @param string $aid
 *   Aid of alert.
 */
function dkc_alerts_get_alert($aid) {
  $result = '';
  $alert = dkc_alert_load($aid);
  $datetime = new DateTime();
//  $datetime->setTime(0, 0);
  if ($alert->start <= $datetime->getTimestamp() && $alert->end >= $datetime->getTimestamp() && $alert->status) {
    $result = theme('dkc_alert', array('alert' => $alert));
  }
  print $result;
  drupal_exit();
}

/**
 * Implements hook_date_popup_process_alter().
 */
function dkc_alerts_date_popup_process_alter(&$element, &$form_state, $context) {
  unset($element['date']['#title']);
}
