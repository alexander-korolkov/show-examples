<?php

/**
 * Implements hook_init().
 */
function dkc_instagram_init() {
 // drupal_add_js(drupal_get_path('module', 'social_media_campaign').'/social_media_campaign.js');
  module_load_include('inc','node','node.admin');
}

/**
 * Implements hook_menu().
 */
function dkc_instagram_menu() {
  $items = array();

  $items['admin/config/smc-admin'] = array(
    'title' => 'Social media Campaign Hub',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkc_instagram_admin'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/smc-management'] = array(
    'title' => 'Social Feed management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkc_instagram_management'),
    'access arguments' => array('access content overview'),
    'type' => MENU_CALLBACK,
  );

    $items['admin/config/test'] = array(
        'title' => 'Test. Just Test.',
        'page callback' => 'dkc_instagram_test',
        'access arguments' => array('access content overview'),
        'type' => MENU_CALLBACK,
    );

  return $items;
}

function dkc_instagram_management($form, $form_state) {
  module_load_include('inc','node','node.admin');

  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'delete') {
    return node_multiple_delete_confirm($form, $form_state, array_filter($form_state['values']['nodes']));
  }
  // $form['filter'] = node_filter_form();
  // $form['#submit'][] = 'node_filter_form_submit';
  $form['admin'] = smc_node_admin_nodes();

  return $form;
}

function custom_node_multiple_delete_confirm($form, &$form_state, $nodes){
  $form['nodes'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);
  // array_filter returns only elements with TRUE values

  foreach ($nodes as $nid => $value) {
    $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
    $form['nodes'][$nid] = array(
      '#type' => 'hidden',
      '#value' => $nid,
      '#prefix' => '<li>',
      '#suffix' => check_plain($title) . "</li>\n",
    );
  }
  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');
  $form['#submit'][] = 'node_multiple_delete_confirm_submit';
  $confirm_question = format_plural(count($nodes),
    'Are you sure you want to delete this item?',
    'Are you sure you want to delete these items?');
  return confirm_form($form,
    $confirm_question,
    'admin/config/smc-management', t('This action cannot be undone.'),
    t('Delete'), t('Cancel'));
}

function custom_node_multiple_delete_confirm_submit($form, &$form_state) {

  if ($form_state['values']['confirm']) {

    $deleted_smc_posts = variable_get('deleted_smc_posts', array());

    foreach ($form_state['values']['nodes'] as $nid) {
      $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
      $deleted_smc_posts[$title] = $title;
    }

    variable_set('deleted_smc_posts', $deleted_smc_posts);

    node_delete_multiple(array_keys($form_state['values']['nodes']));
    cache_clear_all();
    $count = count($form_state['values']['nodes']);
    watchdog('content', 'Deleted @count posts.', array('@count' => $count));
    drupal_set_message(format_plural($count, 'Deleted 1 post.', 'Deleted @count posts.'));
  }
  $form_state['redirect'] = 'admin/config/smc-management';
}


function custom_node_admin_nodes_submit($form, &$form_state){
  $operations = module_invoke_all('node_operations');
  $operation = $operations[$form_state['values']['operation']];
  // Filter out unchecked nodes
  $nodes = array_filter($form_state['values']['nodes']);
  if ($function = $operation['callback']) {
    // Add in callback arguments if present.
    if (isset($operation['callback arguments'])) {
      $args = array_merge(array($nodes), $operation['callback arguments']);
    }
    else {
      $args = array($nodes);
    }

    if($function == 'node_multiple_delete_confirm'){
      $function = 'custom_node_multiple_delete_confirm';
    } elseif ($function == 'node_multiple_delete_confirm_submit'){
      $function = 'custom_node_multiple_delete_confirm_submit';
    }
    // var_dump($function); die;
    call_user_func_array($function, $args);

    cache_clear_all();
  }
  else {
    // We need to rebuild the form to go to a second step. For example, to
    // show the confirmation form for the deletion of nodes.
    $form_state['rebuild'] = TRUE;
  }
}

function dkc_instagram_form_alter(&$form, $form_state, $form_id){
  if($form_id == 'dkc_instagram_management'){
    if($form['#submit'][0] == 'node_multiple_delete_confirm_submit'){
      $form['#submit'][0] = 'custom_node_multiple_delete_confirm_submit';
    }


    // $form_state['redirect'] = 'admin/config/smc-management';
  }
}

function smc_node_admin_nodes(){
  module_load_include('inc','node','node.admin');
  $admin_access = user_access('administer nodes');



  // Build the 'Update options' form.
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#attributes' => array('class' => array('container-inline')),
    '#access' => $admin_access,
  );
  $options = array();
  foreach (module_invoke_all('node_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => $options,
    '#default_value' => 'approve',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#validate' => array('node_admin_nodes_validate'),
    '#submit' => array('custom_node_admin_nodes_submit'),
  );

  // Enable language column if translation module is enabled or if we have any
  // node with language.
  $multilanguage = (module_exists('translation') || db_query_range("SELECT 1 FROM {node} WHERE language <> :language", 0, 1, array(':language' => LANGUAGE_NONE))->fetchField());

  // Build the sortable table header.
  $header = array(
    'title' => array('data' => t('Photo'), 'field' => 'n.title'),
    'type' => array('data' => t('Sticky'), 'field' => 'n.type'),
    'author' => t('Author'),
    'status' => array('data' => t('Status'), 'field' => 'n.status'),
    'changed' => array('data' => t('Updated'), 'field' => 'n.changed', 'sort' => 'desc')
  );
  if ($multilanguage) {
    $header['language'] = array('data' => t('Text'), 'field' => 'n.language');
  }
  $header['operations'] = array('data' => t('Operations'));

  $query = db_select('node', 'n')->condition('n.type', 'campaign_item')->extend('PagerDefault')->extend('TableSort');
  node_build_filter_query($query);

  if (!user_access('bypass node access')) {
    // If the user is able to view their own unpublished nodes, allow them
    // to see these in addition to published nodes. Check that they actually
    // have some unpublished nodes to view before adding the condition.
    if (user_access('view own unpublished content') && $own_unpublished = db_query('SELECT nid FROM {node} WHERE uid = :uid AND status = :status', array(':uid' => $GLOBALS['user']->uid, ':status' => 0))->fetchCol()) {
      $query->condition(db_or()
          ->condition('n.status', 1)
          ->condition('n.type', 'campaign_item')
          ->condition('n.nid', $own_unpublished, 'IN')
      );
    }
    else {
      // If not, restrict the query to published nodes.
      $query->condition('n.status', 1);
    }
  }
  $nids = $query
    ->fields('n',array('nid'))
    ->limit(50)
    ->orderByHeader($header)
    ->addTag('node_access')
    ->execute()
    ->fetchCol();
  $nodes = node_load_multiple($nids);

  // Prepare the list of nodes.
  $languages = language_list();
  $destination = drupal_get_destination();
  $options = array();
  foreach ($nodes as $node) {
    $author = strstr($node->field_username['und'][0]['value'], '@') ?  'Twitter/'.$node->field_username['und'][0]['value'] : 'Instagram/'.$node->field_username['und'][0]['value'];

    $langcode = entity_language('node', $node);
    $l_options = $langcode != LANGUAGE_NONE && isset($languages[$langcode]) ? array('language' => $languages[$langcode]) : array();
    $options[$node->nid] = array(
      'title' =>  isset($node->field_photo['und'][0]['uri']) ? '<a href="'.$node->field_link_to_post['und'][0]['value'].'"><img height="150" width="150" src="'.file_create_url($node->field_photo['und'][0]['uri']).'" /></a>' : '',
      'type' => $node->sticky ? 'Sticked' : 'Not Sticked',
      'author' => $author,
      'status' => $node->status ? t('published') : t('not published'),
      'changed' => isset($node->field_created_timestamp['und'][0]['value']) ? format_date($node->field_created_timestamp['und'][0]['value'] , 'short') : '',
    );

    $options[$node->nid]['language'] = $node->body['en'][0]['value'];

    // Build a list of all the accessible operations for the current node.
    $operations = array();
    if (node_access('update', $node)) {
      $operations['edit'] = array(
        'title' => t('edit'),
        'href' => 'node/' . $node->nid . '/edit',
        'query' => $destination,
      );
    }
    if (node_access('delete', $node)) {
      $operations['delete'] = array(
        'title' => t('delete'),
        'href' => 'node/' . $node->nid . '/delete',
        'query' => $destination,
      );
    }
    $options[$node->nid]['operations'] = array();
    if (count($operations) > 1) {
      // Render an unordered list of operations links.
      $options[$node->nid]['operations'] = array(
        'data' => array(
          '#theme' => 'links__node_operations',
          '#links' => $operations,
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      );
    }
    elseif (!empty($operations)) {
      // Render the first and only operation as a link.
      $link = reset($operations);
      $options[$node->nid]['operations'] = array(
        'data' => array(
          '#type' => 'link',
          '#title' => $link['title'],
          '#href' => $link['href'],
          '#options' => array('query' => $link['query']),
        ),
      );
    }
  }

  // Only use a tableselect when the current user is able to perform any
  // operations.
  //unset($header['type']);
  //  unset($header['author']);
  // unset($header['language']);
  //  dpm($options);
  if ($admin_access) {
    $form['nodes'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No content available.'),
    );
  }


  $form['pager'] = array('#markup' => theme('pager'));
  return $form;
}

function dkc_instagram_admin(){

  $form = array();

  $form['instagram_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instagram Settings'),
    '#collapsible' => TRUE,
    '#weight' => -5
  );

  $form['instagram_fieldset']['instagram_feed'] = array(
    '#type' => 'textarea',
    '#title' => t("Instagram user's IDs"),
    '#rows' => 10,
    '#description' => t('Please provide ID of user that you want to add as a feed. One ID per line. You can lookup Instagram user ID '.l('here','http://jelled.com/instagram/lookup-user-id', array('attributes' => array('target' => "_blank"))).'.'),
    '#default_value' => variable_get('instagram_feed', '1121446360'),
    '#required' => TRUE,
  );

  $form['instagram_fieldset']['instagram_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t("Instagram Application Client ID"),
    '#description' => t('Client ID of your Instagram Application'),
    '#default_value' => variable_get('instagram_client_id', '356d33e9fe5748979d48ef790c07afab'),
    '#required' => TRUE,
  );

  $form['instagram_fieldset']['instagram_client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t("Instagram Application Client SECRET"),
    '#description' => t('Client SECRET of your Instagram Application'),
    '#default_value' => variable_get('instagram_client_secret', 'f8d5532898f846579e9d1afbf2c2b067'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function dkc_instagram_prepare_text($text) {
  $text = utf8_decode($text);
  $text = str_replace('¤ï¸¤ï¸¤ï¸','', $text);

  $text = str_replace('💛💛💛💛💛💙💙💙','', $text);
  $text = str_replace('â','', $text);
  $text = str_replace('ð','', $text);
  $text = str_replace('©','', $text);
  $text = str_replace('¦','', $text);
  $text = str_replace('³','', $text);
  $text = str_replace('³','', $text);
  $text = str_replace('','', $text);
  $text = str_replace('💛','', $text);
  return $text;
}

function dkc_instagram_new_node($fields){
  //Create new Recipe node
  $node = new stdClass;
  $node->uid = 1;
  $node->title = $fields['code'];
  $node->status = 1;
  $node->type = 'instagram_feed';
  $node->name = 'guest1';

  //Field created timestamp
  $node->field_tweet_creation_date = array();
  $node->field_tweet_creation_date['und'][0]['value'] = date("Y-m-d H:i:s",$fields['date'] + 5*60*60 ); // + 5*60*60
 // $node->field_tweet_creation_date['und'][0]['timezone'] = "America/Indiana/Indianapolis";
//  $node->field_tweet_creation_date['und'][0]['timezone_db'] = 'UTC-5';
  $node->field_tweet_creation_date['und'][0]['date_type'] = "datetime";

  //Field body
  $node->body = array();
  $node->body['und'][0]['value'] =   dkc_instagram_prepare_text(   (  $fields['caption'])); //utf8_encode
  $node->body['und'][0]['format'] = "full_html";
  $node->body['und'][0]['summary'] = "";
  $node->body['und'][0]['safe_summary'] = "";
  $node->body['und'][0]['safe_value'] = dkc_instagram_prepare_text(  ( $fields['caption']));

  //Field link
  $node->field_link_to_tweet = array();
  $node->field_link_to_tweet['und'][0]['value'] = "https://www.instagram.com/p/".$fields['code']."/?taken-by=itsindekalbga";
  $node->field_link_to_tweet['und'][0]['format'] = NULL;
  $node->field_link_to_tweet['und'][0]['safe_value '] = "https://www.instagram.com/p/".$fields['code']."/?taken-by=itsindekalbga";

  //Image field
  if(isset($fields['thumbnail_src'])){
    $img_file = file_get_contents($fields['thumbnail_src']);
    $result_img = file_save_data($img_file);
    $node->field_instagram_image = array();
    $node->field_instagram_image['und'][0] = (array)$result_img;
  }

  @node_submit($node);
  @node_save($node);

}

/**
 * Implements hook_cron().
 *
 * Queues news feeds for updates once their refresh interval has elapsed.
 */
function dkc_instagram_cron() {
  smc_instagram_cron();
}

function scrape_insta($username) {
    $insta_source = file_get_contents('http://instagram.com/'.$username);
    $shards = explode('window._sharedData = ', $insta_source);
    $insta_json = explode(';</script>', $shards[1]);
    $insta_array = json_decode($insta_json[0], TRUE);
    return $insta_array;
}

function dkc_instagram_test() {
 /*   $deleted_smc_posts = variable_get('deleted_smc_posts', array());

    $ids = explode("\n", variable_get('instagram_feed', '3681728599'));
    $client_id = variable_get('instagram_client_id', '4e289afe142344e990be97d3bc1767e3');
    $min_timestamp =  variable_get('instagram_min_timestamp', '0');

    foreach($ids as $id) {
        $id = trim($id);
        $url = "https://api.instagram.com/v1/users/$id/media/recent/?min_timestamp=$min_timestamp&client_id=$client_id";
        $result = drupal_http_request($url);
        $result_data = drupal_json_decode($result->data);
        dpm($url);
    }
 */

   variable_set("instagram_codes", array());//smc_instagram_cron();
    return "test";
}

function smc_instagram_cron() {
   $results = scrape_insta("itsindekalbga");
   $items = $results['entry_data']['ProfilePage'][0]['user']['media']['nodes'];
  //  variable_set("instagram_codes",array());
   $codes = variable_get("instagram_codes", array());

   foreach($items as $fields) {
      if(!in_array($fields['code'],$codes)) {
        $codes[] = $fields['code'];
        dkc_instagram_new_node($fields);
      }
   }
   variable_set("instagram_codes",$codes);
}  
  